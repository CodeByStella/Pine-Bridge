
 📌 GENERAL FUNCTIONAL REQUIREMENTS

 🔐 Authentication (Shared for User and Admin)

 Register and login using email and password
 Passwords should be hashed (e.g., bcrypt)
 Use JWT tokens for session authentication
 Role-based users: `user`, `admin`

---

 🌐 USER PORTAL (Frontend 1)

 1. Before Login

Two pages:

 Login Page

   Inputs: Email, Password
   Button: Login
   Button: Register

 Register Page

   Inputs: Email, Password, First Name, Last Name, Country
   Button: Register
   Button: Login

 2. After Login – Dashboard

Header:

 "Pine-Bridge" title
 "User: \[username]" and Logout button

Sections:

 A. My Scripts

 List up to 10 user-uploaded scripts
 Each script has:

   Start `▶`, Pause `‖`, Stop `■` buttons
   Delete `X` button with popup confirmation
   Upload button (opens popup to paste Pinescript code)
 Allow multiple scripts to run at once
 Highlight active buttons
 Scroll if more than 10 scripts

 B. Actions (Just placeholder content for now)

 C. My Trading Accounts

 List of up to 10 linked accounts
 Each row has:

   Delete `X` button with confirmation
   If connected successfully, row should highlight in green
   Show which strategies are running for each account
 Add account popup:

   Inputs: Server, Username, Password, Account Number

---

 🛠 BACKEND (Express + MongoDB)

 Store users, scripts, and trading accounts
 User roles: "user", "admin"
 REST API for login, register, scripts CRUD, accounts CRUD
 Token-based auth middleware
 Admin-specific endpoints (only accessible to `admin` role):

   GET all users
   View scripts/accounts of specific users

---

 🧑‍💼 ADMIN PORTAL (Frontend 2)

Admin logs in on a separate interface.

 Pages:

 Admin Login Page

   Email, Password

 Admin Dashboard

   View all registered users in a table

     Show: ID, Email, First Name, Last Name, Country, Role
   Optional: click user to view their scripts and accounts

---

 🔧 DEVELOPMENT STRUCTURE

You should create three separate apps:

1. `/server` → Backend Express API
2. `/client-user` → React app for end users
3. `/client-admin` → React app for admin interface

Use `.env` files to manage configuration (MongoDB URI, JWT secret, etc.)


